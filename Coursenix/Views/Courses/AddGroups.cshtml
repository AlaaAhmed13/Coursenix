<!--

 @model AddGroupsViewModel


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Coursenix</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link rel="stylesheet" href="@Url.Content("~/CSS/create_course.css")"> @* Assuming you use the same CSS or adapt it *@

</head>
<body>

    <header class="navbar navbar-expand-lg navbar-light bg-white py-3 shadow-sm">
        <div class="container-fluid">
            <a class="navbar-brand d-flex align-items-center" href="@Url.Action("Index", "Home")">
                <div class="logo">
                    <img src="@Url.Content("~/assets/logo.svg")" alt="Coursenix Logo">
                </div>
                <div>
                    <span class="word">Coursenix</span>
                </div>
            </a>
            <div class="dropdown">
                <button class="btn profile-btn" type="button" id="profileDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <img src="@Url.Content("~/assets/teacher2.svg")" alt="Profile" class="rounded-circle profile-img">
                </button>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="profileDropdown">
                    <li><a class="dropdown-item" href="@Url.Action("Dashboard", "Teacher")"><i class="bi bi-speedometer2 me-2"></i> Dashboard</a></li>
                    <li><a class="dropdown-item" href="@Url.Action("Create", "Courses")"><i class="bi bi-plus-circle me-2"></i> Create New Course</a></li>
                    <li><a class="dropdown-item" href="@Url.Action("Settings", "Teacher")"><i class="bi bi-gear me-2"></i> Settings</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#"><i class="bi bi-box-arrow-right me-2"></i> Sign-out</a></li>
                </ul>
            </div>
        </div>
    </header>

    <main class="container py-4">
        @if (!string.IsNullOrEmpty(Model?.StatusMessage))
        {
            <div class="alert @(Model.IsSuccess ? "alert-success" : "alert-danger")" role="alert">
                @Model.StatusMessage
            </div>
        }

        <div class="card shadow-sm">
            <div class="card-body p-4">
                <h2 class="section-title">Add Groups for Course: @Model?.Subject?.SubjectName</h2>
                <p class="text-muted">Grade Level: @Model?.Subject?.GradeLevel</p>


                <form asp-controller="Courses" asp-action="AddGroups" method="post" id="groupsForm">
                    @Html.AntiForgeryToken()

                    <div asp-validation-summary="All" class="text-danger mb-4"></div>

                    <input type="hidden" asp-for="SubjectId" />

                    <section id="groupsSection" class="mb-4">
                        <div id="gradesContainer">
                        </div>
                        <span asp-validation-for="Groups" class="text-danger"></span>
                    </section>


                    <div class="text-end">
                        <button type="button" class="btn btn-secondary me-2" onclick="addNewGroup(@(Model.Subject?.GradeLevel ?? 0))">+ Add Group</button> @* Use null propagation and default 0 *@
                        <button type="submit" class="btn btn-success px-4 py-2">Save Groups</button>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <footer class="py-3 mt-4 bg-light">
        <div class="container text-center text-muted">
            <small>&copy; 2025 Eduvera. All Rights reserved.</small>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        const gradesContainer = document.getElementById('gradesContainer');
        const groupsForm = document.getElementById('groupsForm'); 

        // Safely get the course grade level from the ViewModel, default to null or 0 if not available
        // Note: This variable is likely redundant now that we pass grade to addNewGroup
        // const courseGradeLevel = @Html.Raw(Json.Serialize(Model?.Subject?.GradeLevel));


        let groupNextIndex = 0; 

        function addNewGroup(grade) {
            const actualGrade = typeof grade === 'number' && !isNaN(grade) ? grade : (@(Model.Subject?.GradeLevel ?? 0));

            if (actualGrade <= 0) {
                console.error("Cannot add group: Invalid grade level provided.");
                return;
            }


            const safeGrade = actualGrade.toString().replace(/[^a-zA-Z0-9-_]/g, '_'); // Use actualGrade here
            const groupContainerId = `groupList-${safeGrade}`;
            let groupContainer = document.getElementById(groupContainerId);

            if (!groupContainer) {
                 const gradeBox = document.createElement('div');
                 gradeBox.className = 'grade-box mb-4 p-3 border rounded';
                 gradeBox.dataset.grade = actualGrade; // Use actualGrade here
                 gradeBox.id = `gradeBox-${safeGrade}`;

                 gradeBox.innerHTML = `
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5 class="mb-0">Groups for Grade ${actualGrade}</h5> @* Use actualGrade here *@
                    </div>
                    <div class="groups-container" id="${groupContainerId}">
                    </div>
                 `;
                 gradesContainer.appendChild(gradeBox);
                 groupContainer = document.getElementById(groupContainerId); // Get the reference after adding
                 const mainGroupsSection = document.getElementById('groupsSection');
                 if(mainGroupsSection) {
                     mainGroupsSection.classList.remove('d-none');
                 }
            }


            const groupIndex = groupNextIndex;
            groupNextIndex++;

            const groupDiv = document.createElement('div');
            groupDiv.className = 'group-card fade-in p-3 my-2';
            groupDiv.dataset.grade = actualGrade; // Store integer grade - Use actualGrade here
            groupDiv.dataset.groupIndex = groupIndex; // Store the index

            groupDiv.innerHTML = `
                <div class="d-flex justify-content-between">
                    <strong class="group-title">Group ${groupIndex + 1}</strong>
                    <button type="button" class="btn btn-sm btn-outline-danger delete-group-btn" onclick="deleteGroup(this)">🗑</button>
                </div>

                <input type="hidden" name="Groups[${groupIndex}].Grade" value="${actualGrade}" /> @* Use actualGrade here *@

                <div class="mb-2">
                    <label>Group Name</label>
                    <input type="text" class="form-control" name="Groups[${groupIndex}].GroupName" placeholder="Enter group name">
                    <span data-valmsg-for="Groups[${groupIndex}].GroupName" class="text-danger"></span>
                </div>
                <div class="mb-2">
                    <label>Days</label>
                    <input type="text" class="form-control" name="Groups[${groupIndex}].Days" placeholder="Tuesday & Thursday">
                    <span data-valmsg-for="Groups[${groupIndex}].Days" class="text-danger"></span>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6 mb-2">
                        <label>Time From</label>
                        <input type="time" class="form-control" name="Groups[${groupIndex}].StartTime">
                        <span data-valmsg-for="Groups[${groupIndex}].StartTime" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-2">
                        <label>Time To</label>
                        <input type="time" class="form-control" name="Groups[${groupIndex}].EndTime">
                        <span data-valmsg-for="Groups[${groupIndex}].EndTime" class="text-danger"></span>
                    </div>
                </div>
            `;

            groupContainer.appendChild(groupDiv);

            if (typeof $ !== 'undefined' && typeof $.validator !== 'undefined' && typeof $.validator.unobtrusive !== 'undefined') {
                 $.validator.unobtrusive.parse(groupDiv);
            } else {
                 console.warn("jQuery Validation scripts not fully loaded. Client-side validation for dynamically added groups may not work.");
            }


            updateGroupNumbers(groupContainer);
        }

        function deleteGroup(button) {
            const groupElement = button.closest('.group-card');
            const groupsContainer = groupElement ? groupElement.parentElement : null;
             const gradeBox = groupsContainer ? groupsContainer.closest('.grade-box') : null;

             if (!groupElement || !groupsContainer) {
                 console.error("Could not determine parent elements for deletion.");
                 return;
             }


            groupElement.style.opacity = '0';
            groupElement.style.transform = 'translateY(10px)';
            groupElement.style.transition = 'all 0.3s ease';

            setTimeout(() => {
                groupElement.remove();

                if (groupsContainer.querySelectorAll('.group-card').length === 0) {
                     if(gradeBox) {
                         gradeBox.style.opacity = '0';
                         gradeBox.style.transform = 'translateY(10px)';
                         gradeBox.style.transition = 'all 0.3s ease';
                         setTimeout(() => {
                            gradeBox.remove();
                            const mainGroupsSection = document.getElementById('groupsSection');
                            if(mainGroupsSection && mainGroupsSection.querySelectorAll('.grade-box').length === 0) {
                                mainGroupsSection.classList.add('d-none');
                            }
                         }, 300);
                     }
                } else {
                    updateGroupNumbers(groupsContainer);
                    reIndexGroupNames(groupsContainer);
                }

                 if (groupsForm && typeof $ !== 'undefined' && typeof $.validator !== 'undefined' && typeof $.validator.unobtrusive !== 'undefined') {
                    $.validator.unobtrusive.parse(groupsForm);
                 } else {
                         console.warn("jQuery Validation scripts not fully loaded. Client-side validation after deletion may not work.");
                    }

            }, 300); 
        }

        function updateGroupNumbers(container) {
            const groupCards = container.querySelectorAll('.group-card');
            groupCards.forEach((card, index) => {
                const title = card.querySelector('.group-title');
                if (title) {
                    title.textContent = `Group ${index + 1}`; 
                }
                card.dataset.groupIndex = index; 
            });
        }

        function reIndexGroupNames(container) {
            const groupCards = container.querySelectorAll('.group-card');
            groupCards.forEach((card, index) => {
                 card.querySelectorAll('input[name^="Groups["], select[name^="Groups["], textarea[name^="Groups["]').forEach(input => {
                    const oldName = input.getAttribute('name');
                    if (oldName) {
                        const propertyName = oldName.split('.').pop();
                        input.setAttribute('name', `Groups[${index}].${propertyName}`);
                        const validationSpan = card.querySelector(`span[data-valmsg-for^="Groups["]`);
                         if(validationSpan && validationSpan.getAttribute('data-valmsg-for').endsWith(`.${propertyName}`))
                         {
                              validationSpan.setAttribute('data-valmsg-for', `Groups[${index}].${propertyName}`);
                         }
                    }
                });

                 if (typeof $ !== 'undefined' && typeof $.validator !== 'undefined' && typeof $.validator.unobtrusive !== 'undefined') {
                      $.validator.unobtrusive.parse(card);
                 } else {
                         console.warn("jQuery Validation scripts not fully loaded. Client-side validation for re-indexed groups may not work.");
                    }
            });
             groupNextIndex = groupCards.length;
        }


         document.addEventListener('DOMContentLoaded', function() {
             const subject = @Html.Raw(Json.Serialize(Model?.Subject)); // Safely serialize the Subject object
             const groupsToPrepopulate = @Html.Raw(Json.Serialize(Model?.Groups)); // Safely serialize the list of groups

             if (subject && groupsToPrepopulate && groupsToPrepopulate.length > 0) {
                  groupsToPrepopulate.forEach(groupData => {
                      addNewGroup(groupData.grade); // Pass the group's grade

                     const containerId = `groupList-${groupData.grade.toString().replace(/[^a-a-zA-Z0-9-_]/g, '_')}`; // Fix typo here
                     const container = document.getElementById(containerId);
                     const newGroupDiv = container ? container.querySelector(`.group-card[data-group-index="${groupNextIndex - 1}"]`) : null;


                      if (newGroupDiv) {
                          newGroupDiv.querySelector(`[name="Groups[${groupNextIndex - 1}].GroupName"]`).value = groupData.groupName || ''; // Use || '' to handle null
                          newGroupDiv.querySelector(`[name="Groups[${groupNextIndex - 1}].Days"]`).value = groupData.days || '';
                          newGroupDiv.querySelector(`[name="Groups[${groupNextIndex - 1}].StartTime"]`).value = groupData.startTime || '';
                          newGroupDiv.querySelector(`[name="Groups[${groupNextIndex - 1}].EndTime"]`).value = groupData.endTime || '';

                      } else {
                          console.error("Could not find the newly added group div for prepopulation.");
                      }
                 });

                 const firstGradeBox = gradesContainer.querySelector('.grade-box');
                 if (firstGradeBox) {
                     const groupsContainer = firstGradeBox.querySelector('.groups-container');
                      if(groupsContainer) {
                         updateGroupNumbers(groupsContainer);
                         reIndexGroupNames(groupsContainer); 
                      }
                 }


             } else {
                 if (subject && typeof subject.gradeLevel === 'number' && subject.gradeLevel > 0) {
                      addNewGroup(subject.gradeLevel);
                 } else {
                         const mainGroupsSection = document.getElementById('groupsSection');
                         if(mainGroupsSection) {
                             mainGroupsSection.classList.add('d-none');
                         }
                         console.warn("Subject or Grade Level not available to automatically add the first group.");
                    }
             }

               if (typeof $ !== 'undefined' && typeof $.validator !== 'undefined' && typeof $.validator.unobtrusive !== 'undefined') {
                    $.validator.unobtrusive.parse(groupsForm);
               } else {
                    console.warn("jQuery Validation scripts not fully loaded. Client-side validation may not work correctly.");
               }
         });

    </script>
</body>
</html>

               -->