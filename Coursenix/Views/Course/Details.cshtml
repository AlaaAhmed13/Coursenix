@model Coursenix.Models.ViewModels.CourseDetailsViewModel

@{
    ViewData["Title"] = "Course Details - " + Model.Course.Name;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .course-card-wrapper {
            max-width: 900px;
            margin: 2rem auto;
            padding: 0 1rem;
        }
        
        .course-card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            padding: 2rem;
        }
        
        .course-info {
            display: flex;
            gap: 2rem;
            margin-top: 1rem;
            flex-wrap: wrap;
        }
        
        .course-info span {
            color: #666;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .course-price {
            font-size: 2rem;
            font-weight: bold;
            color: #2ba9a9;
        }
        
        .teacher-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin: 1.5rem 0;
        }
        
        .teacher-image {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            overflow: hidden;
            background-color: #f0f0f0;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .teacher-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .teacher-name {
            margin: 0;
            color: #333;
        }
        
        .teacher-title {
            margin: 0;
            color: #666;
            font-size: 0.9rem;
        }
        
        .grade-tabs {
            display: flex;
            gap: 1rem;
            margin: 1.5rem 0;
            flex-wrap: wrap;
        }
        
        .grade-tab {
            padding: 0.75rem 1.5rem;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 500;
            background-color: white;
        }
        
        .grade-tab.active {
            background-color: #2ba9a9;
            color: white;
            border-color: #2ba9a9;
        }
        
        .grade-tab:hover:not(.active) {
            border-color: #2ba9a9;
            color: #2ba9a9;
        }
        
        .group-card {
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            cursor: pointer;
            transition: all 0.3s;
            position: relative;
            background-color: white;
        }
        
        .group-card:hover:not(.disabled) {
            border-color: #2ba9a9;
        }
        
        .group-card.selected {
            border-color: #2ba9a9;
            background-color: #f0fffe;
        }
        
        .group-card.disabled {
            opacity: 0.6;
            cursor: not-allowed;
            background-color: #f8f9fa;
        }
        
        .group-title {
            margin-bottom: 1rem;
            color: #333;
            font-weight: 600;
        }
        
        .group-details {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .group-details li {
            color: #666;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .group-details li i {
            width: 16px;
            color: #2ba9a9;
        }
        
        .seats-badge {
            position: absolute;
            top: 1rem;
            right: 1rem;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        
        .seats-available {
            background-color: #d4edda;
            color: #155724;
        }
        
        .only_n_available {
            background-color: #fff3cd;
            color: #856404;
        }
        
        .seats-full {
            background-color: #f8d7da;
            color: #721c24;
        }
        
        .radio-button {
            position: absolute;
            bottom: 1rem;
            right: 1rem;
            width: 20px;
            height: 20px;
            border: 2px solid #ccc;
            border-radius: 50%;
            transition: all 0.3s;
            background-color: white;
        }
        
        .radio-button.selected {
            border-color: #2ba9a9;
            background-color: #2ba9a9;
        }
        
        .radio-button.selected::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 8px;
            height: 8px;
            background-color: white;
            border-radius: 50%;
        }
        
        .enroll-btn {
            background-color: #2ba9a9;
            color: white;
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 1rem;
        }
        
        .enroll-btn:hover:not(:disabled) {
            background-color: #248a8a;
            transform: translateY(-1px);
        }
        
        .enroll-btn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
            transform: none;
        }
        
        .navbar {
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .user-avatar {
            background-color: #2ba9a9;
        }
        
        .alert {
            margin-top: 1rem;
            border-radius: 8px;
        }
        
        .no-groups-message {
            text-align: center;
            padding: 2rem;
            color: #666;
            font-style: italic;
        }
        
        .loading-spinner {
            display: none;
            text-align: center;
            padding: 2rem;
        }
        
        .loading-spinner .spinner-border {
            color: #2ba9a9;
        }
        
        media (max-width: 768px) {
            .course-info {
                gap: 1rem;
            }
            
            .grade-tabs {
                gap: 0.5rem;
            }
            
            .grade-tab {
                padding: 0.5rem 1rem;
                font-size: 0.9rem;
            }
            
            .group-card {
                padding: 1rem;
            }
            
            .seats-badge {
                position: static;
                display: inline-block;
                margin-top: 0.5rem;
            }
            
            .radio-button {
                position: static;
                margin-top: 0.5rem;
            }
        }
    </style>
</head>

<body>
    <nav class="navbar navbar-expand-lg bg-white py-3 shadow-sm">
        <div class="container d-flex justify-content-between align-items-center">
            <a class="navbar-brand d-flex align-items-center" href="@Url.Action("Index", "Home")">
                <div style="width: 40px; height: 40px; background-color: #2ba9a9; color: white; display: flex; align-items: center; justify-content: center; border-radius: 5px; font-weight: bold; margin-right: 10px;">D</div>
                <div>
                    <div style="font-weight: bold;">Dresley</div>
                    <div style="font-size: 0.7rem; color: #666;">Course Booking</div>
                </div>
            </a>

            <ul class="navbar-nav d-flex flex-row gap-3 mx-auto">
                <li class="nav-item">
                    <a class="nav-link" href="@Url.Action("Index", "Home")">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" href="@Url.Action("Index", "Course")">Courses</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Contact</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">About</a>
                </li>
            </ul>

            <div class="d-flex align-items-center">
                <div class="user-avatar bg-teal text-white rounded-circle d-flex justify-content-center align-items-center" style="width: 35px; height: 35px; font-weight: bold;">
                    @(Model.CurrentStudent?.Name?.Substring(0, 1).ToUpper() ?? "U")
                </div>
                <span class="ms-2 user-name">@(Model.CurrentStudent?.Name ?? "User")</span>
            </div>
        </div>
    </nav>

    <div class="course-card-wrapper">
    <div class="course-card">
        <div class="row align-items-center mb-4">
            <div class="col-md-8">
                <h2>@Model.Course.Name</h2>
                <div class="course-info">
                    <span><i class="fas fa-graduation-cap"></i> 
                        @if (Model.Course.GradeLevels.Any())
                        {
                            var grades = Model.Course.GradeLevels.Select(gl => gl.NumberOfGrade).OrderBy(g => g).ToList();

                            string gradeText;

                            if (grades.Count == 0)
                            {
                                gradeText = "No grades specified";
                            }
                            else if (grades.Count == 1)
                            {
                                gradeText = $"Grade {grades.First()}";
                            }
                            else
                            {
                                // For multiple grades, list them individually
                                gradeText = "Grades: " + string.Join(", ", grades.Select(g => g.ToString()));
                            }

                            @gradeText
                        }
                        else
                        {
                            @:No grades available
                        }
                    </span>
                    <span><i class="fas fa-calendar"></i> 2 Classes/Week</span>
                    <span><i class="fas fa-map-marker-alt"></i> @Model.Course.Location</span>
                </div>
                @if (!string.IsNullOrEmpty(Model.Course.Description))
                {
                    <p class="mt-3 text-muted">@Model.Course.Description</p>
                }
            </div>
            <div class="col-md-4 text-md-end">
                <div class="course-price" id="current-price">
                    @if (Model.Course.GradeLevels.Any())
                    {
                        var minPrice = Model.Course.GradeLevels.OrderBy(g => g.NumberOfGrade).First().Price;
                        @($"${minPrice:F2}")
                    }
                </div>
            </div>
        </div>

            <div class="teacher-info">
                <div class="teacher-image">
                    @if (!string.IsNullOrEmpty(Model.Course.Teacher.ProfilePicture))
                    {
                        <img src="@Model.Course.Teacher.ProfilePicture" alt="@Model.Course.Teacher.Name">
                    }
                    else
                    {
                        <div class="d-flex align-items-center justify-content-center h-100 bg-secondary text-white rounded-circle" style="width: 60px; height: 60px; font-size: 1.5rem; font-weight: bold;">
                            @Model.Course.Teacher.Name.Substring(0, 1).ToUpper()
                        </div>
                    }
                </div>
                <div>
                    <h5 class="teacher-name">@Model.Course.Teacher.Name</h5>
                    <p class="teacher-title">@(Model.Course.Teacher.Biography ?? "Experienced Teacher")</p>
                </div>
            </div>

            <hr>

            <h4 class="mb-3">Choose your Grade</h4>
            <div class="grade-tabs">
                @foreach (var gradeLevel in Model.Course.GradeLevels.OrderBy(g => g.NumberOfGrade))
                {
                    <div class="grade-tab @(gradeLevel == Model.Course.GradeLevels.OrderBy(g => g.NumberOfGrade).First() ? "active" : "")" 
                         data-grade-id="@gradeLevel.Id" 
                         data-price="@gradeLevel.Price"
                         data-grade-number="@gradeLevel.NumberOfGrade">
                        Grade @gradeLevel.NumberOfGrade
                    </div>
                }
            </div>

            <p class="mb-4" id="selection-instruction">Select one of the available groups for <span id="current-grade-text">Grade @Model.Course.GradeLevels.OrderBy(g => g.NumberOfGrade).First().NumberOfGrade</span> below to enroll in this course.</p>

            <div class="loading-spinner" id="loading-spinner">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading groups...</p>
            </div>

            <div id="groups-container">
                {{-- Groups will be loaded here dynamically via JavaScript --}}
            </div>

            <form asp-action="Enroll" asp-controller="Course" method="post" id="enrollment-form">
                <input type="hidden" name="courseId" value="@Model.Course.Id" />
                <input type="hidden" name="groupId" value="" id="selected-group-id" />
                <div class="mt-4 text-end">
                    <button type="submit" class="enroll-btn" id="enroll-button" disabled>Select a Group</button>
                </div>
            </form>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    let selectedGroupId = null;
    let currentGradeId = null;

    // Grade levels data from the server
    const gradeLevelsData = @Html.Raw(Json.Serialize(Model.Course.GradeLevels.Select(g => new {
        Id = g.Id,
        NumberOfGrade = g.NumberOfGrade,
        Price = g.Price,
        Groups = g.Groups.Select(gr => new {
            Id = gr.Id,
            Name = gr.Name ?? $"Group {gr.Id}",
            SelectedDays = gr.SelectedDays,
            StartTime = gr.StartTime.ToString(@"h\:mm"),
            EndTime = gr.EndTime.ToString(@"h\:mm"),
            Location = gr.Location ?? "",
            TotalSeats = gr.TotalSeats,
            EnrolledStudentsCount = gr.EnrolledStudentsCount,
            AvailableSeats = gr.TotalSeats - gr.EnrolledStudentsCount
        }).ToList()
    }).OrderBy(g => g.NumberOfGrade)));

    document.addEventListener('DOMContentLoaded', function() {
        console.log('Grade levels data:', gradeLevelsData); // Debug log
        console.log('Total grades available:', gradeLevelsData.length);
        
        // Log each grade and its groups for debugging
        gradeLevelsData.forEach(grade => {
            console.log(`Grade ${grade.NumberOfGrade} (ID: ${grade.Id}) has ${grade.Groups ? grade.Groups.length : 0} groups`);
            if (grade.Groups) {
                grade.Groups.forEach(group => {
                    console.log(`  - Group: ${group.Name} (ID: ${group.Id})`);
                });
            }
        });
        
        // Initialize with the first grade
        if (gradeLevelsData.length > 0) {
            // Find the active grade tab or use the first one
            const activeTab = document.querySelector('.grade-tab.active');
            if (activeTab) {
                currentGradeId = parseInt(activeTab.dataset.gradeId);
            } else {
                currentGradeId = gradeLevelsData[0].Id;
                // Make the first tab active if none is active
                const firstTab = document.querySelector('.grade-tab');
                if (firstTab) {
                    firstTab.classList.add('active');
                }
            }
            
            console.log('Initial grade ID selected:', currentGradeId);
            loadGroupsForGrade(currentGradeId);
        }

        // Attach event listeners to all grade tabs
        document.querySelectorAll('.grade-tab').forEach((tab, index) => {
            console.log(`Attaching listener to tab ${index}: Grade ${tab.dataset.gradeNumber} (ID: ${tab.dataset.gradeId})`);
            
            tab.addEventListener('click', function(e) {
                e.preventDefault(); // Prevent any default behavior
                
                console.log('=== Grade Tab Clicked ===');
                console.log('Clicked tab data:', {
                    gradeId: this.dataset.gradeId,
                    gradeNumber: this.dataset.gradeNumber,
                    price: this.dataset.price
                });
                
                const gradeId = parseInt(this.dataset.gradeId);
                const gradeNumber = this.dataset.gradeNumber;
                const price = parseFloat(this.dataset.price);

                // Ensure we have valid data
                if (!gradeId || isNaN(gradeId)) {
                    console.error('Invalid grade ID:', this.dataset.gradeId);
                    return;
                }

                // Update active tab
                document.querySelectorAll('.grade-tab').forEach(t => {
                    t.classList.remove('active');
                    console.log('Removed active from:', t.dataset.gradeNumber);
                });
                this.classList.add('active');
                console.log('Added active to:', gradeNumber);

                // Update price
                const priceElement = document.getElementById('current-price');
                if (priceElement) {
                    priceElement.textContent = `${price.toFixed(2)}`;
                    console.log('Updated price to:', price);
                }

                // Update instruction text
                const gradeTextElement = document.getElementById('current-grade-text');
                if (gradeTextElement) {
                    gradeTextElement.textContent = `Grade ${gradeNumber}`;
                    console.log('Updated grade text to:', gradeNumber);
                }

                // Load groups for selected grade
                currentGradeId = gradeId;
                console.log('Setting current grade ID to:', currentGradeId);
                loadGroupsForGrade(gradeId);
                
                // Reset selection when switching grades
                selectedGroupId = null; 
                updateEnrollButton();
                console.log('=== End Grade Tab Click ===');
            });
        });

        // Initial setup for the enroll button
        updateEnrollButton(); 
    });

    // Function to load groups for a specific grade ID
    function loadGroupsForGrade(gradeId) {
        console.log('=== Loading Groups ===');
        console.log('Loading groups for grade ID:', gradeId);
        console.log('Available grade data:', gradeLevelsData);
        
        const container = document.getElementById('groups-container');
        const loadingSpinner = document.getElementById('loading-spinner');

        if (!container) {
            console.error('Groups container not found!');
            return;
        }

        // Show loading spinner
        loadingSpinner.style.display = 'block';
        container.style.display = 'none';

        // Find the grade data - make sure we're comparing the right types
        const gradeData = gradeLevelsData.find(g => {
            console.log(`Comparing grade ID ${g.Id} (${typeof g.Id}) with ${gradeId} (${typeof gradeId})`);
            return parseInt(g.Id) === parseInt(gradeId);
        });
        
        console.log('Found grade data:', gradeData);
        
        if (gradeData && gradeData.Groups) {
            console.log('Groups in this grade:', gradeData.Groups);
            console.log('Number of groups:', gradeData.Groups.length);
        }

        // Use a shorter delay for better responsiveness
        setTimeout(() => {
            // Clear the container
            container.innerHTML = '';
            console.log('Container cleared');

            if (!gradeData) {
                console.error('No grade data found for ID:', gradeId);
                container.innerHTML = '<div class="no-groups-message"><i class="fas fa-exclamation-triangle fa-2x mb-3 text-warning"></i><p>Error: Grade data not found.</p></div>';
            } else if (!gradeData.Groups || gradeData.Groups.length === 0) {
                console.log('No groups found for grade ID:', gradeId);
                container.innerHTML = '<div class="no-groups-message"><i class="fas fa-info-circle fa-2x mb-3 text-muted"></i><p>No groups available for this grade level.</p></div>';
            } else {
                console.log('Creating group cards for:', gradeData.Groups.length, 'groups');
                
                // Create and display all groups for this grade
                gradeData.Groups.forEach((group, index) => {
                    console.log(`Creating card for group ${index + 1}:`, group);
                    
                    const isDisabled = group.AvailableSeats <= 0;
                    const badgeClass = group.AvailableSeats === 0 ? 'seats-full' :
                                       group.AvailableSeats <= 4 ? 'only_n_available' : 'seats-available';
                    const badgeText = group.AvailableSeats === 0 ? 'Seats are Full' :
                                       group.AvailableSeats <= 4 ? `Only ${group.AvailableSeats} seats` :
                                       `${group.AvailableSeats} seats available`;

                    const groupCard = document.createElement('div');
                    groupCard.className = `group-card ${isDisabled ? 'disabled' : ''}`;
                    groupCard.dataset.groupId = group.Id;

                    // Handle the days - make sure it's an array
                    let daysText = 'Not specified';
                    if (group.SelectedDays) {
                        if (Array.isArray(group.SelectedDays)) {
                            daysText = group.SelectedDays.join(' & ');
                        } else if (typeof group.SelectedDays === 'string') {
                            daysText = group.SelectedDays;
                        }
                    }

                    const locationHtml = group.Location ? `<li><i class="fas fa-map-marker-alt"></i> ${group.Location}</li>` : '';
                    const radioButtonHtml = !isDisabled ? '<div class="radio-button"></div>' : '';

                    groupCard.innerHTML = `
                        <h5 class="group-title">${group.Name}</h5>
                        <ul class="group-details">
                            <li><i class="fas fa-calendar-alt"></i> ${daysText}</li>
                            <li><i class="fas fa-clock"></i> ${group.StartTime} - ${group.EndTime}</li>
                            ${locationHtml}
                            <li><i class="fas fa-users"></i> ${group.EnrolledStudentsCount}/${group.TotalSeats} students enrolled</li>
                        </ul>
                        <span class="seats-badge ${badgeClass}">${badgeText}</span>
                        ${radioButtonHtml}
                    `;

                    container.appendChild(groupCard);
                    console.log(`Group card ${index + 1} added to container`);
                });
                
                console.log('All group cards created and added');
            }

            // Hide loading spinner and show container
            loadingSpinner.style.display = 'none';
            container.style.display = 'block';
            console.log('Loading spinner hidden, container shown');

            // Attach event listeners to the newly created group cards
            attachGroupEventListeners();
            console.log('=== End Loading Groups ===');
        }, 100); // Reduced delay for faster response
    }

    // Function to attach event listeners to group cards
    function attachGroupEventListeners() {
        console.log('=== Attaching Group Event Listeners ===');
        
        // Clear any existing selections
        selectedGroupId = null;
        updateEnrollButton();

        // Find all group cards (both enabled and disabled)
        const allGroupCards = document.querySelectorAll('.group-card');
        const enabledGroupCards = document.querySelectorAll('.group-card:not(.disabled)');
        
        console.log('Total group cards found:', allGroupCards.length);
        console.log('Enabled group cards found:', enabledGroupCards.length);

        // Attach click events to non-disabled group cards
        enabledGroupCards.forEach((card, index) => {
            const groupId = card.dataset.groupId;
            console.log(`Attaching listener to group card ${index + 1}, Group ID: ${groupId}`);
            
            card.addEventListener('click', function(e) {
                e.preventDefault();
                console.log('=== Group Card Clicked ===');
                console.log('Clicked group ID:', this.dataset.groupId);
                
                const clickedGroupId = parseInt(this.dataset.groupId);
                if (!clickedGroupId || isNaN(clickedGroupId)) {
                    console.error('Invalid group ID:', this.dataset.groupId);
                    return;
                }
                
                selectGroup(clickedGroupId, this);
                console.log('=== End Group Card Click ===');
            });
        });
        
        console.log('=== End Attaching Group Event Listeners ===');
    }

    // Function to handle group selection
    function selectGroup(groupId, cardElement) {
        // Remove selection from all cards
        document.querySelectorAll('.group-card').forEach(card => {
            card.classList.remove('selected');
            const radio = card.querySelector('.radio-button');
            if (radio) radio.classList.remove('selected');
        });

        // Add selection to clicked card
        cardElement.classList.add('selected');
        const radio = cardElement.querySelector('.radio-button');
        if (radio) radio.classList.add('selected');

        selectedGroupId = groupId;
        updateEnrollButton();
    }

    // Function to update the state of the enroll button
    function updateEnrollButton() {
        const enrollButton = document.getElementById('enroll-button');
        const selectedGroupInput = document.getElementById('selected-group-id');
        
        if (selectedGroupId) {
            enrollButton.disabled = false;
            enrollButton.textContent = 'Enroll';
            selectedGroupInput.value = selectedGroupId;
        } else {
            enrollButton.disabled = true;
            enrollButton.textContent = 'Select a Group';
            selectedGroupInput.value = '';
        }
    }

    // Form submission validation
    document.getElementById('enrollment-form').addEventListener('submit', function(e) {
        if (!selectedGroupId) {
            e.preventDefault();
            alert('Please select a group before enrolling.');
            return false;
        }
    });
</script>
</body>
</html>