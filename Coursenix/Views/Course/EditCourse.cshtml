@model EditCourseVM
@{
    Layout = "_Layout";
}

@section css {
    <link rel="stylesheet" href="/css/create_course.css" />
    <style>
        /* Keep existing styles as provided */
        .grade-level-card {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 16px;
            background-color: #f9f9f9;
            transition: all 0.3s ease;
        }

            .grade-level-card:hover {
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            }

        .grade-level-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }

        .grade-level-title {
            font-weight: 600;
            color: #333;
            margin: 0;
        }

        .grade-actions {
            display: flex;
            gap: 8px;
        }

        .remove-grade-btn {
            background: none;
            border: 1px solid #dc3545;
            color: #dc3545;
            cursor: pointer;
            font-size: 12px;
            padding: 4px 8px;
            border-radius: 4px;
            transition: all 0.2s ease;
        }

            .remove-grade-btn:hover {
                background-color: #dc3545;
                color: white;
            }

        .grade-display-mode {
            padding: 12px;
            background-color: #f8f9fa;
            border-radius: 4px;
            margin-bottom: 8px;
        }

        .grade-edit-mode {
            border: 2px solid #26a69a;
            padding: 16px;
            border-radius: 4px;
            background-color: #f0f8f7;
        }

        .grade-number-display, .grade-price-display {
            color: #495057;
            font-weight: 500;
        }

        .btn-edit-grade {
            background-color: #17a2b8;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

            .btn-edit-grade:hover {
                background-color: #138496;
            }

        .add-grade-level-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 16px;
            border: 2px dashed #ccc;
            border-radius: 8px;
            background-color: #f9f9f9;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            color: #888;
            margin-top: 16px;
        }

            .add-grade-level-btn:hover {
                border-color: #26a69a;
                background-color: #f0f8f7;
                color: #26a69a;
                text-decoration: none;
            }

        .grade-inputs-row {
            display: flex;
            gap: 16px;
            align-items: end;
        }

            .grade-inputs-row .form-group {
                flex: 1;
            }

        .form-group {
            margin-bottom: 16px;
        }

            .form-group label {
                display: block;
                margin-bottom: 4px;
                font-weight: 500;
                color: #333;
            }

            .form-group input, .form-group select { /* Added select */
                width: 100%;
                padding: 8px 12px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
            }

                .form-group input:focus, .form-group select:focus { /* Added select */
                    outline: none;
                    border-color: #26a69a;
                    box-shadow: 0 0 0 2px rgba(38, 166, 154, 0.2);
                }

        .grade-level-section {
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid #e9ecef;
        }

        .btn-add-grade {
            background-color: #26a69a;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

            .btn-add-grade:hover {
                background-color: #2bbbad;
            }

        .text-danger {
            font-size: 12px;
            margin-top: 4px;
        }
    </style>
}

<main class="container py-4">
    <div class="card shadow-sm">
        <div class="card-body p-4">
            <form id="courseForm"
                  asp-controller="Course"
                  asp-action="EditCourse"
                  method="post"
                  enctype="multipart/form-data">
                <input asp-for="Id" type="hidden" />
                <input asp-for="TeacherId" type="hidden" />
                <div asp-validation-summary="All" class="text-danger"></div>

                <section class="mb-4">
                    <div class="row mb-3">
                        <div class="col-md-8 course-info">
                            <h2 class="section-title">Edit Course Information</h2>
                            <p class="text-muted">Update your course details below</p>

                            <div class="mb-3">
                                <label asp-for="Name" class="form-label"></label>
                                <input asp-for="Name"
                                       class="form-control"
                                       placeholder="Enter course name" />
                                <span asp-validation-for="Name" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="col-md-4 thum">
                            <div class="thumbnail-container text-center">
                                <p class="mb-1 fw-bold">Course Thumbnail</p>
                                <img src="@(Model.CurrentThumbnailUrl ?? "")" id="img" alt="Course Thumbnail"
                                     style="max-width: 100%; max-height: 150px; @(string.IsNullOrEmpty(Model.CurrentThumbnailUrl) ? "display: none;" : "")" />
                                <label for="input" class="file_up">
                                    <i class="bi bi-upload me-1"></i>@(string.IsNullOrEmpty(Model.CurrentThumbnailUrl) ? "upload file" : "change file")
                                </label>
                                <input type="file" id="input"
                                       name="ThumbnailFile"
                                       accept="image/*"
                                       style="display: none;" />
                                @if (!string.IsNullOrEmpty(Model.CurrentThumbnailUrl))
                                {
                                    <div class="mt-2">
                                        <button type="button" class="btn btn-sm btn-outline-danger" id="removeThumbnail">
                                            <i class="bi bi-trash me-1"></i>Remove
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Description" class="form-label"></label>
                        <textarea asp-for="Description"
                                  class="form-control"
                                  rows="4"
                                  placeholder="Tell what students will learn from this course"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                </section>

                <section class="mb-4">
                    <h2 class="section-title">Course Details</h2>

                    <div class="row mb-3">
                        <div class="col-md-6 mb-3">
                            <label asp-for="Location" class="form-label"></label>
                            <input asp-for="Location" class="form-control" placeholder="Enter Course Location" />
                            <span asp-validation-for="Location" class="text-danger"></span>
                        </div>

                        <div class="col-md-6 mb-3">
                            <label asp-for="StudentsPerGroup" class="form-label"></label>
                            <input asp-for="StudentsPerGroup"
                                   class="form-control"
                                   type="number"
                                   placeholder="Enter maximum number of students in each group"
                                   min="1" />
                            <span asp-validation-for="StudentsPerGroup" class="text-danger"></span>
                        </div>
                    </div>
                </section>

                <section class="mb-4">
                    <h2 class="section-title">Grade Levels</h2>
                    <p class="text-muted">Manage the grade levels and pricing for this course</p>

                    <div class="grade-level-section">
                        <div id="gradeLevelsContainer">
                            @if (Model.GradeLevels != null && Model.GradeLevels.Any())
                            {
                                @for (int i = 0; i < Model.GradeLevels.Count; i++)
                                {
                                    <div class="grade-level-card" data-index="@i" data-grade-id="@Model.GradeLevels[i].Id">
                                        <div class="grade-level-header">
                                            <h5 class="grade-level-title">Grade @Model.GradeLevels[i].NumberOfGrade</h5>
                                            <div class="grade-actions">
                                                <button type="button" class="btn btn-sm btn-outline-primary me-2" onclick="editGradeLevel(this)" title="Edit Grade Level">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </button>
                                                <button type="button" class="remove-grade-btn" onclick="removeGradeLevel(this)" title="Delete Grade Level">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </div>
                                        </div>

                                        <input type="hidden" name="GradeLevels[@i].Id" value="@Model.GradeLevels[i].Id" />
                                        <input type="hidden" name="GradeLevels[@i].IsDeleted" value="false" class="is-deleted-input" />

                                        <div class="grade-display-mode">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <strong>Grade Number:</strong> <span class="grade-number-display">@Model.GradeLevels[i].NumberOfGrade</span>
                                                </div>
                                                <div class="col-md-6">
                                                    <strong>Price:</strong> <span class="grade-price-display">@Model.GradeLevels[i].Price EGP</span>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="grade-edit-mode" style="display: none;">
                                            <div class="grade-inputs-row">
                                                <div class="form-group">
                                                    <label for="GradeLevels_@(i)__NumberOfGrade">Grade Number</label>
                                                    <select id="GradeLevels_@(i)__NumberOfGrade"
                                                            name="GradeLevels[@i].NumberOfGrade"
                                                            class="form-control grade-number-input"
                                                            required>
                                                    </select>
                                                    <span class="text-danger" data-valmsg-for="GradeLevels[@i].NumberOfGrade"></span>
                                                </div>

                                                <div class="form-group">
                                                    <label for="GradeLevels_@(i)__Price">Price (EGP)</label>
                                                    <input type="number"
                                                           id="GradeLevels_@(i)__Price"
                                                           name="GradeLevels[@i].Price"
                                                           value="@Model.GradeLevels[i].Price"
                                                           class="form-control grade-price-input"
                                                           min="0"
                                                           step="0.01"
                                                           required />
                                                    <span class="text-danger" data-valmsg-for="GradeLevels[@i].Price"></span>
                                                </div>

                                                <div class="form-group" style="display: flex; align-items: end; gap: 8px;">
                                                    <button type="button" class="btn btn-sm btn-success" onclick="saveGradeLevel(this)" title="Save Changes">
                                                        <i class="bi bi-check"></i> Save
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-secondary" onclick="cancelEditGradeLevel(this)" title="Cancel">
                                                        <i class="bi bi-x"></i> Cancel
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>

                        <button type="button" class="add-grade-level-btn" onclick="addGradeLevel()">
                            <i class="bi bi-plus-circle me-2"></i>
                            Add New Grade Level
                        </button>
                    </div>
                </section>

                <section class="mb-3">
                    <h2 class="section-title">Course Statistics</h2>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="card bg-light">
                                <div class="card-body text-center">
                                    <h5 class="card-title text-primary">@Model.TotalGroups</h5>
                                    <p class="card-text small">Total Groups</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card bg-light">
                                <div class="card-body text-center">
                                    <h5 class="card-title text-success">@Model.TotalEnrollments</h5>
                                    <p class="card-text small">Total Enrollments</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card bg-light">
                                <div class="card-body text-center">
                                    <h5 class="card-title text-info">@Model.TeacherName</h5>
                                    <p class="card-text small">Teacher</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

                <div class="text-end">
                    <a href="@Url.Action("ViewCourse", "Course", new { id = Model.Id })" class="btn btn-secondary px-4 py-2 me-2">Cancel</a>
                    <button type="submit" class="btn btn-success px-4 py-2">
                        <i class="bi bi-check-circle me-1"></i>Update Course
                    </button>
                </div>
            </form>
        </div>
    </div>
</main>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        let gradeIndex = @(Model.GradeLevels?.Count ?? 0);

        // File upload preview functionality
        document.addEventListener('DOMContentLoaded', function() {
            const input = document.getElementById('input');
            const img = document.getElementById('img');
            const removeThumbnailBtn = document.getElementById('removeThumbnail');
            const fileLabel = document.querySelector('.file_up');

            // File input change handler
            if (input) {
                input.addEventListener('change', function() {
                    if (this.files && this.files[0]) {
                        const file = this.files[0];

                        // Validate file type
                        if (!file.type.startsWith('image/')) {
                            alert('Please select a valid image file.');
                            this.value = '';
                            return;
                        }

                        // Validate file size (5MB max)
                        if (file.size > 5 * 1024 * 1024) {
                            alert('File size must be less than 5MB.');
                            this.value = '';
                            return;
                        }

                        // Preview the image
                        img.src = URL.createObjectURL(file);
                        img.style.display = 'block';
                        fileLabel.innerHTML = '<i class="bi bi-upload me-1"></i>change file';

                        // Add remove button if it doesn't exist
                        if (!removeThumbnailBtn) {
                            const removeBtn = document.createElement('button');
                            removeBtn.type = 'button';
                            removeBtn.className = 'btn btn-sm btn-outline-danger mt-2';
                            removeBtn.id = 'removeThumbnail';
                            removeBtn.innerHTML = '<i class="bi bi-trash me-1"></i>Remove';
                            fileLabel.parentElement.appendChild(removeBtn);

                            removeBtn.addEventListener('click', removeThumbnailHandler);
                        }
                    }
                });
            }

            // Remove thumbnail functionality
            function removeThumbnailHandler() {
                img.src = '';
                img.style.display = 'none';
                input.value = '';
                fileLabel.innerHTML = '<i class="bi bi-upload me-1"></i>upload file';

                // Add hidden input to indicate thumbnail removal
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'RemoveThumbnail';
                hiddenInput.value = 'true';
                document.getElementById('courseForm').appendChild(hiddenInput);

                // Remove the button
                this.remove();
            }

            if (removeThumbnailBtn) {
                removeThumbnailBtn.addEventListener('click', removeThumbnailHandler);
            }
        });

        // Grade Level Management Functions
        function addGradeLevel() {
            const container = document.getElementById('gradeLevelsContainer');
            const gradeOptions = generateGradeOptions(null); // Generate options for a new grade
            const newGradeHtml = `
                <div class="grade-level-card" data-index="${gradeIndex}" data-grade-id="0" data-is-new="true">
                    <div class="grade-level-header">
                        <h5 class="grade-level-title">New Grade Level</h5>
                        <div class="grade-actions">
                            <button type="button" class="remove-grade-btn" onclick="removeGradeLevel(this)" title="Delete Grade Level">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    </div>

                    <input type="hidden" name="GradeLevels[${gradeIndex}].Id" value="0" />
                    <input type="hidden" name="GradeLevels[${gradeIndex}].IsDeleted" value="false" class="is-deleted-input" />

                    <div class="grade-edit-mode">
                        <div class="grade-inputs-row">
                            <div class="form-group">
                                <label for="GradeLevels_${gradeIndex}__NumberOfGrade">Grade Number</label>
                                <select id="GradeLevels_${gradeIndex}__NumberOfGrade"
                                        name="GradeLevels[${gradeIndex}].NumberOfGrade"
                                        class="form-control grade-number-input"
                                        required>
                                    ${gradeOptions}
                                </select>
                                <span class="text-danger" data-valmsg-for="GradeLevels[${gradeIndex}].NumberOfGrade"></span>
                            </div>

                            <div class="form-group">
                                <label for="GradeLevels_${gradeIndex}__Price">Price (EGP)</label>
                                <input type="number"
                                       id="GradeLevels_${gradeIndex}__Price"
                                       name="GradeLevels[${gradeIndex}].Price"
                                       value=""
                                       class="form-control grade-price-input"
                                       min="0"
                                       step="0.01"
                                       required />
                                <span class="text-danger" data-valmsg-for="GradeLevels[${gradeIndex}].Price"></span>
                            </div>

                            <div class="form-group" style="display: flex; align-items: end; gap: 8px;">
                                <button type="button" class="btn btn-sm btn-success" onclick="saveGradeLevel(this)" title="Save Changes">
                                    <i class="bi bi-check"></i> Save
                                </button>
                                <button type="button" class="btn btn-sm btn-secondary" onclick="cancelEditGradeLevel(this)" title="Cancel">
                                    <i class="bi bi-x"></i> Cancel
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            container.insertAdjacentHTML('beforeend', newGradeHtml);
            gradeIndex++;

            // Re-enable validation for new elements
            if (typeof jQuery !== 'undefined' && jQuery.validator && jQuery.validator.unobtrusive) {
                jQuery.validator.unobtrusive.parse(document);
            }
        }

        // /**
        //  * Generates HTML options for grade numbers from 7 to 12.
        //  * Optionally pre-selects a value.
        //  * param {number|null} selectedValue - The grade number to be pre-selected.
        //  * returns {string} HTML string of <option> elements.
        //  */
        function generateGradeOptions(selectedValue) {
            let options = '';
            for (let i = 7; i <= 12; i++) {
                const selected = (selectedValue !== null && selectedValue == i) ? 'selected' : '';
                options += `<option value="${i}" ${selected}>Grade ${i}</option>`;
            }
            return options;
        }

        /**
         * Populates the grade number dropdown for an existing grade level.
         * This is called on page load for each existing grade.
         */
        function populateExistingGradeDropdowns() {
            const existingGradeCards = document.querySelectorAll('#gradeLevelsContainer .grade-level-card');
            existingGradeCards.forEach(gradeCard => {
                const gradeNumberDisplay = gradeCard.querySelector('.grade-number-display');
                const gradeNumberSelect = gradeCard.querySelector('.grade-number-input');

                if (gradeNumberDisplay && gradeNumberSelect) {
                    const currentGradeNumber = parseInt(gradeNumberDisplay.textContent);
                    gradeNumberSelect.innerHTML = generateGradeOptions(currentGradeNumber);
                }
            });
        }


        function editGradeLevel(button) {
            const gradeCard = button.closest('.grade-level-card');
            const displayMode = gradeCard.querySelector('.grade-display-mode');
            const editMode = gradeCard.querySelector('.grade-edit-mode');
            const editButton = gradeCard.querySelector('button[onclick*="editGradeLevel"]');

            // Get current displayed grade number to pre-select in dropdown
            const currentGradeNumber = parseInt(gradeCard.querySelector('.grade-number-display').textContent.replace('Grade ', ''));
            const gradeNumberSelect = gradeCard.querySelector('.grade-number-input');
            gradeNumberSelect.innerHTML = generateGradeOptions(currentGradeNumber); // Repopulate dropdown with current value selected

            // Hide display mode and show edit mode
            displayMode.style.display = 'none';
            editMode.style.display = 'block';
            editButton.style.display = 'none';
        }

        function saveGradeLevel(button) {
            const gradeCard = button.closest('.grade-level-card');
            const editMode = gradeCard.querySelector('.grade-edit-mode');
            const editButton = gradeCard.querySelector('button[onclick*="editGradeLevel"]');

            const gradeNumberSelect = gradeCard.querySelector('.grade-number-input');
            const gradePriceInput = gradeCard.querySelector('.grade-price-input');

            // Client-side validation for required fields
            if (!gradeNumberSelect.value || !gradePriceInput.value) {
                alert('Please fill in all required fields.');
                return;
            }

            const currentGradeNumber = parseInt(gradeNumberSelect.value);
            // Client-side validation for grade range (7-12)
            if (currentGradeNumber < 7 || currentGradeNumber > 12) {
                alert('Grade number must be between 7 and 12.');
                return;
            }

            // Client-side validation for price (non-negative)
            if (parseFloat(gradePriceInput.value) < 0) {
                alert('Price cannot be negative.');
                return;
            }

            // Check for duplicate grade numbers among all visible, non-deleted grade cards
            const allGradeCards = document.querySelectorAll('#gradeLevelsContainer .grade-level-card');
            let hasDuplicate = false;

            allGradeCards.forEach(card => {
                // Only consider cards that are not the current card and are not marked for deletion
                const isDeleted = card.querySelector('.is-deleted-input')?.value === 'true';
                if (card !== gradeCard && !isDeleted) {
                    let otherGradeNumber;
                    const otherGradeInput = card.querySelector('.grade-number-input');
                    const otherDisplaySpan = card.querySelector('.grade-number-display');

                    // Determine the other grade's number based on its current mode (edit or display)
                    // Check if the other card is currently in edit mode and its input has a value
                    if (otherGradeInput && otherGradeInput.closest('.grade-edit-mode').style.display !== 'none' && otherGradeInput.value) {
                        otherGradeNumber = parseInt(otherGradeInput.value);
                    }
                    // Otherwise, if it's in display mode and its display span has content
                    else if (otherDisplaySpan && otherDisplaySpan.closest('.grade-display-mode').style.display !== 'none' && otherDisplaySpan.textContent) {
                        otherGradeNumber = parseInt(otherDisplaySpan.textContent.replace('Grade ', ''));
                    }

                    if (otherGradeNumber === currentGradeNumber) {
                        hasDuplicate = true;
                    }
                }
            });

            if (hasDuplicate) {
                alert('This grade number already exists. Please choose a different grade number.');
                return;
            }

            // Update display values
            const gradeNumberDisplay = gradeCard.querySelector('.grade-number-display');
            const gradePriceDisplay = gradeCard.querySelector('.grade-price-display');
            const gradeTitle = gradeCard.querySelector('.grade-level-title');

            if (gradeNumberDisplay) gradeNumberDisplay.textContent = currentGradeNumber;
            if (gradePriceDisplay) gradePriceDisplay.textContent = gradePriceInput.value + ' EGP';
            if (gradeTitle) gradeTitle.textContent = 'Grade ' + currentGradeNumber;

            // If it's a new grade, ensure display mode elements are created and shown
            if (gradeCard.dataset.isNew === 'true') {
                const displayHtml = `
                    <div class="grade-display-mode">
                        <div class="row">
                            <div class="col-md-6">
                                <strong>Grade Number:</strong> <span class="grade-number-display">${currentGradeNumber}</span>
                            </div>
                            <div class="col-md-6">
                                <strong>Price:</strong> <span class="grade-price-display">${gradePriceInput.value} EGP</span>
                            </div>
                        </div>
                    </div>
                `;
                // Remove existing display mode if it was a new card that just saved for the first time
                const existingDisplayMode = gradeCard.querySelector('.grade-display-mode');
                if (existingDisplayMode) existingDisplayMode.remove();

                editMode.insertAdjacentHTML('beforebegin', displayHtml); // Insert new display mode before edit mode

                // Add edit button if it was a new card (it wouldn't have one initially)
                const actionsDiv = gradeCard.querySelector('.grade-actions');
                const existingEditButton = actionsDiv.querySelector('button[onclick*="editGradeLevel"]');
                if (!existingEditButton) {
                    const editButtonHtml = `
                        <button type="button" class="btn btn-sm btn-outline-primary me-2" onclick="editGradeLevel(this)" title="Edit Grade Level">
                            <i class="bi bi-pencil"></i> Edit
                        </button>
                    `;
                    actionsDiv.insertAdjacentHTML('afterbegin', editButtonHtml);
                }
                gradeCard.removeAttribute('data-is-new'); // Mark as no longer new
            }

            // Switch back to display mode
            editMode.style.display = 'none';
            const newDisplayMode = gradeCard.querySelector('.grade-display-mode');
            if (newDisplayMode) newDisplayMode.style.display = 'block';

            if (editButton) {
                editButton.style.display = 'inline-block';
            } else {
                // For newly created grade levels, show the edit button that was just added
                const newlyAddedEditButton = gradeCard.querySelector('button[onclick*="editGradeLevel"]');
                if (newlyAddedEditButton) {
                    newlyAddedEditButton.style.display = 'inline-block';
                }
            }
        }


        function cancelEditGradeLevel(button) {
            const gradeCard = button.closest('.grade-level-card');
            const editMode = gradeCard.querySelector('.grade-edit-mode');
            const displayMode = gradeCard.querySelector('.grade-display-mode');
            const editButton = gradeCard.querySelector('button[onclick*="editGradeLevel"]');

            // If this is a new grade level being cancelled, remove it
            if (gradeCard.dataset.isNew === 'true') {
                gradeCard.remove();
                updateGradeIndices(); // Reindex after removal
                return;
            }

            // For existing grade levels, reset input values to original displayed values
            const gradeNumberSelect = gradeCard.querySelector('.grade-number-input');
            const gradePriceInput = gradeCard.querySelector('.grade-price-input');
            const gradeNumberDisplay = gradeCard.querySelector('.grade-number-display');
            const gradePriceDisplay = gradeCard.querySelector('.grade-price-display');

            if (gradeNumberDisplay && gradeNumberSelect) {
                const displayedGrade = parseInt(gradeNumberDisplay.textContent);
                gradeNumberSelect.value = displayedGrade;
            }
            if (gradePriceDisplay && gradePriceInput) {
                gradePriceInput.value = parseFloat(gradePriceDisplay.textContent.replace(' EGP', ''));
            }

            // Switch back to display mode
            editMode.style.display = 'none';
            if (displayMode) displayMode.style.display = 'block';
            if (editButton) editButton.style.display = 'inline-block';
        }

        function removeGradeLevel(button) {
            const gradeCard = button.closest('.grade-level-card');
            const isDeletedInput = gradeCard.querySelector('.is-deleted-input');

            if (gradeCard.dataset.isNew === 'true') {
                // If it's a newly added grade not yet saved to DB, just remove it from DOM
                gradeCard.remove();
            } else {
                // For existing grade levels, mark as deleted and hide
                if (isDeletedInput) {
                    isDeletedInput.value = 'true';
                }
                gradeCard.style.display = 'none'; // Hide the card
            }
            updateGradeIndices(); // Reindex after removal or hiding
        }

        // Function to re-index the name attributes of grade level inputs after additions/removals
        function updateGradeIndices() {
            const allGradeCards = document.querySelectorAll('#gradeLevelsContainer .grade-level-card:not([style*="display: none"])'); // Only visible cards
            gradeIndex = 0; // Reset global index for new additions

            allGradeCards.forEach(card => {
                card.dataset.index = gradeIndex;

                // Update hidden ID input
                const idInput = card.querySelector(`input[name$=".Id"]`);
                if (idInput) {
                    idInput.name = `GradeLevels[${gradeIndex}].Id`;
                }

                // Update hidden IsDeleted input
                const isDeletedInput = card.querySelector('.is-deleted-input');
                if (isDeletedInput) {
                    isDeletedInput.name = `GradeLevels[${gradeIndex}].IsDeleted`;
                }

                // Update inputs in edit mode
                const gradeNumberSelect = card.querySelector('.grade-number-input');
                if (gradeNumberSelect) {
                    gradeNumberSelect.id = `GradeLevels_${gradeIndex}__NumberOfGrade`;
                    gradeNumberSelect.name = `GradeLevels[${gradeIndex}].NumberOfGrade`;
                }

                const gradePriceInput = card.querySelector('.grade-price-input');
                if (gradePriceInput) {
                    gradePriceInput.id = `GradeLevels_${gradeIndex}__Price`;
                    gradePriceInput.name = `GradeLevels[${gradeIndex}].Price`;
                }

                // Update validation messages' data-valmsg-for attribute
                const gradeNumberValidationSpan = card.querySelector(`span[data-valmsg-for*="NumberOfGrade"]`);
                if (gradeNumberValidationSpan) {
                    gradeNumberValidationSpan.dataset.valmsgFor = `GradeLevels[${gradeIndex}].NumberOfGrade`;
                }

                const gradePriceValidationSpan = card.querySelector(`span[data-valmsg-for*="Price"]`);
                if (gradePriceValidationSpan) {
                    gradePriceValidationSpan.dataset.valmsgFor = `GradeLevels[${gradeIndex}].Price`;
                }

                gradeIndex++;
            });
        }

        // Initial call to populate dropdowns for existing grades and update indices on page load
        document.addEventListener('DOMContentLoaded', () => {
            populateExistingGradeDropdowns();
            updateGradeIndices();
        });
    </script>
}