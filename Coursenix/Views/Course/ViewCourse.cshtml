@model Coursenix.Models.Course

@{
    ViewData["Title"] = "View Course";
    Layout = "_Layout";
}

@section css {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/material-design-icons/3.0.1/iconfont/material-icons.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="~/css/viewCourse.css" rel="stylesheet">
}

            .add-new-group .add-text {
                font-size: 16px;
                font-weight: 500;
                color: inherit;
            }

        /* Enhanced dropdown menu styling */
        .dropdown-menu {
            display: none;
            position: absolute;
            right: 0;
            top: 100%;
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 1000;
            min-width: 200px;
            overflow: hidden;
        }

            .dropdown-menu.show-dropdown {
                display: block !important;
            }

        .dropdown-item {
            padding: 12px 16px;
            cursor: pointer;
            border-bottom: 1px solid #f5f5f5;
            display: flex;
            align-items: center;
            transition: background-color 0.2s ease;
            color: #333;
            text-decoration: none;
        }

            .dropdown-item:hover {
                background-color: #f8f9fa;
            }

<div class="course-details">
    <h2>Course Details</h2>

    <div class="course-header">
        <div class="course-info">
            <div class="course-title">@Model.Name</div>
            <div class="course-meta">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-14h2v6h-2zm0 8h2v2h-2z" />
                </svg>
                Grades @(Model.GradeLevels != null && Model.GradeLevels.Any() ? $"{((IEnumerable<Coursenix.Models.GradeLevel>)Model.GradeLevels).Min(gl => gl.NumberOfGrade)}-{((IEnumerable<Coursenix.Models.GradeLevel>)Model.GradeLevels).Max(gl => gl.NumberOfGrade)}" : "N/A")
            </div>
            <div class="course-meta">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z" />
                </svg>
                @Model.Location
            </div>
            <div class="course-meta">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5s-3 1.34-3 3 1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z" />
                </svg>
                @Model.StudentsPerGroup students/group
            </div>
        </div>
        <div class="price-actions">
            <div class="course-actions">
                <button class="edit-button">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                        <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z" fill="#888" />
                    </svg>
                </button>
                <form asp-controller="Course" asp-action="DeleteCourse" method="post" onsubmit="return confirmDelete()">
                    <input type="hidden" name="id" value="@Model.Id" />

                    @Html.AntiForgeryToken()

                    <button type="submit" class="delete-button">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                            <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z" fill="#888" />
                        </svg>
                    </button>
                </form>
            </div>
        </div>
    </div>

    <hr>

    <div class="grades-container">
        @foreach (var gradeLevel in ((IEnumerable<Coursenix.Models.GradeLevel>)Model.GradeLevels).OrderBy(gl => gl.NumberOfGrade))
        {
            <div class="grade-column">
                <div class="grade-header">
                    <div class="grade-title">Grade @gradeLevel.NumberOfGrade</div>
                    <div class="grade-price">
                        @gradeLevel.Price
                    </div>
                </div>

                @foreach (var group in ((IEnumerable<Coursenix.Models.Group>)gradeLevel.Groups).OrderBy(g => g.Name))
                {

                    var seatsAvailable = group.TotalSeats - group.EnrolledStudentsCount;
                    var seatStatusClass = seatsAvailable > 0 ? "seats-available" : "seats-full";
                    var seatStatusText = seatsAvailable > 0 ? $"Seats Available: {seatsAvailable}/{group.TotalSeats}" : "Seats are Full";

                    <div class="group-card">
                        <div class="group-header">
                            <div class="group-title">@group.Name</div>
                            <div class="group-menu" onclick="toggleDropdown(this, event)">
                                ⋮
                                <div class="dropdown-menu">
                                    <div class="dropdown-item"><i class="fas fa-plus-circle"></i> Add Session Attendance</div>
                                    <div class="dropdown-item"><i class="fas fa-clipboard-check"></i> View Students Attendance</div>
                                    <a href="@Url.Action("EditGroup", "Course", new { id = group.Id })"><div class="dropdown-item"><i class="far fa-edit"></i> Edit</div></a>
                                </div>
                            </div>
                        </div>
                        <ul class="group-schedule">
                            @if (group.SelectedDays != null && group.SelectedDays.Any())
                            {
                                <li>@string.Join(" & ", group.SelectedDays)</li>
                            }
                            else
                            {
                                <li>No specific days</li>
                            }
                            <li>@startDateTime.ToString("hh:mm tt") - @endDateTime.ToString("hh:mm tt")</li>
                        </ul>
                        <div class="seat-status @seatStatusClass">@seatStatusText</div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@section scripts {
    <script>
        // Profile dropdown functionality
        document.addEventListener('DOMContentLoaded', function() {
            const profileBtn = document.querySelector('.profile-btn');
            const dropdownContent = document.querySelector('.dropdown-content');

            if (profileBtn && dropdownContent) {
                profileBtn.addEventListener('click', function (e) {
                    e.stopPropagation();
                    dropdownContent.classList.toggle('show');
                });

                window.addEventListener('click', function () {
                    dropdownContent.classList.remove('show');
                });

                dropdownContent.addEventListener('click', function (e) {
                    e.stopPropagation();
                });
            }
        });

        // Fixed group menu dropdown functionality
        function toggleDropdown(element, event) {
            // Prevent event bubbling
            event.stopPropagation();

            // Close all other dropdowns first
            const allDropdowns = document.querySelectorAll('.dropdown-menu');
            allDropdowns.forEach(dropdown => {
                if (dropdown !== element.querySelector('.dropdown-menu')) {
                    dropdown.style.display = 'none';
                    dropdown.classList.remove('show-dropdown');
                }
            });

            // Toggle the clicked dropdown
            const dropdown = element.querySelector('.dropdown-menu');
            if (dropdown) {
                const isVisible = dropdown.style.display === 'block' || dropdown.classList.contains('show-dropdown');

                if (isVisible) {
                    dropdown.style.display = 'none';
                    dropdown.classList.remove('show-dropdown');
                } else {
                    dropdown.style.display = 'block';
                    dropdown.classList.add('show-dropdown');
                }
            }
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', function (event) {
            if (!event.target.closest('.group-menu')) {
                const allDropdowns = document.querySelectorAll('.dropdown-menu');
                allDropdowns.forEach(dropdown => {
                    dropdown.style.display = 'none';
                    dropdown.classList.remove('show-dropdown');
                });
            }
        });

        // Prevent dropdown from closing when clicking inside it
        document.addEventListener('click', function(event) {
            if (event.target.closest('.dropdown-menu')) {
                event.stopPropagation();
            }
        });

        function confirmDelete() {
            return confirm("Are you sure you want to delete this course? This action cannot be undone.");
        }
    </script>
}
