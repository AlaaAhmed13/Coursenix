@* Views/Teacher/Settings.cshtml *@
@model TeacherSettingsViewModel

@{
    // Set the page title dynamically
    ViewData["Title"] = "Account Settings";

    // Remove Layout = "_Layout"; as this is a full page view as requested
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    @* Link CSS files - Use Url.Content("~/...") for local files *@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/material-design-icons/3.0.1/iconfont/material-icons.min.css" rel="stylesheet">
    @* Update path to teacherSetting.css using Url.Content *@
    <link href="@Url.Content("~/CSS/teacherSetting.css")" rel="stylesheet">
     @* Ensure Bootstrap CSS is linked if needed *@
    @* <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"> *@
</head>
<body>

     <nav class="navbar">
        @* Update logo link/path *@
        <a href="@Url.Action("Index", "Home")" class="logo">
             <div style="color: #26a69a;">
                <i class="material-icons" style="font-size: 36px;">school</i>
            </div>
            <div class="logo-text">
                Eduvera
                <span>Learning Platform</span>
            </div>
        </a>

        @* Navigation links - Update using Url.Action or Tag Helpers *@
        <ul class="nav-links">
            <li><a href="@Url.Action("Index", "Home")">Home</a></li>
            <li><a href="@Url.Action("Index", "Courses")">Courses</a></li>
            <li><a href="#">Contact</a></li>
            <li><a href="#">About</a></li>
        </ul>

        @* Profile Dropdown - Static data for now. Requires Authentication to be dynamic. *@
        @* Check if Teacher model is available (via ViewModel) *@
        @if (Model != null && Model.TeacherId != 0) @* Use TeacherId as a check if logged in data was loaded *@
        {
             <div class="profile-dropdown">
                 @* Use Teacher's profile picture - Update path using Url.Content *@
                <button class="profile-btn">
                     @if (!string.IsNullOrEmpty(Model.CurrentProfilePictureUrl))
                     {
                          <img src="@Model.CurrentProfilePictureUrl" alt="Profile" class="profile-image">
                     }
                     else
                     {
                         <img src="@Url.Content("~/assets/teacher1.svg")" alt="Profile" class="profile-image"> @* Default image *@
                     }
                </button>
                <div class="dropdown-content">
                  <div class="dropdown-header">
                    @* Use profile picture in dropdown - Update path using Url.Content *@
                     @if (!string.IsNullOrEmpty(Model.CurrentProfilePictureUrl))
                     {
                          <img src="@Model.CurrentProfilePictureUrl" alt="Profile" class="profile-image large">
                     }
                     else
                     {
                          <img src="@Url.Content("~/assets/teacher1.svg")" alt="Profile" class="profile-image large"> @* Default image *@
                     }
                    <div>
                         @* Display Teacher's Name dynamically *@
                      <h4>@Model.FullName</h4> @* Assuming FullName is populated in GET action *@
                    </div>
                  </div>
                  <hr>
                  @* Update links *@
                  <a href="#"><i class="fas fa-user"></i> View Profile</a>
                  <a href="@Url.Action("Settings", "Teacher")"><i class="fas fa-cog"></i> Settings</a> @* Link to this page *@
                  <hr>
                  @* Sign-out link - Requires implementation in AccountController or TeacherController *@
                  <a href="#" class="sign_out"><i class="fas fa-sign-out-alt"></i> Sign-out</a>
                </div>
             </div>
        }
        else
        {
             @* Display login/signup links or placeholder if teacher data is not available *@
             <div><a href="@Url.Action("Sign_In", "Teacher")">Sign In</a></div>
        }
    </nav>

    <!-- Main Content Container -->
    <div class="container">
        <h1>Account Settings</h1>

        @* Display Status Message *@
         @if (!string.IsNullOrEmpty(Model?.StatusMessage))
         {
             <div class="alert @(Model.IsSuccess ? "alert-success" : "alert-danger")" role="alert">
                 @Model.StatusMessage
             </div>
         }
        @* End Status Message *@

        @* **Start of the Settings Form** *@
        @* Form for updating profile details and password. Use enctype="multipart/form-data" for file uploads. *@
        <form asp-controller="Teacher" asp-action="Settings" method="post" enctype="multipart/form-data">
             @* Add anti-förgery token for security *@
            <input type="hidden" asp-antiforgery="true" />
            @* Pass the TeacherId (or other identifier) in a hidden field *@
            <input type="hidden" asp-for="TeacherId" /> @* Or use name="TeacherId" value="@Model.TeacherId" *@

             @* Display validation summary for errors not tied to a specific field *@
             <div asp-validation-summary="ModelOnly" class="text-danger mb-4"></div>


            <div class="profile-section">
                <div class="form-section">
                    @* Full Name Input *@
                    <div class="form-group">
                        <label asp-for="FullName"></label>
                        <input type="text" asp-for="FullName" placeholder="Enter full name">
                         <span asp-validation-for="FullName" class="text-danger"></span> @* Display validation errors *@
                    </div>
                    @* Phone Number Input *@
                    <div class="form-group">
                        <label asp-for="PhoneNumber"></label>
                        <input type="tel" asp-for="PhoneNumber" placeholder="Enter phone number">
                         <span asp-validation-for="PhoneNumber" class="text-danger"></span> @* Display validation errors *@
                    </div>
                    @* Email Address Input - Often read-only or requires special handling *@
                     @* Making it read-only as email changes are complex *@
                    <div class="form-group">
                        <label asp-for="Email"></label>
                        <input type="email" asp-for="Email" placeholder="Enter email address" readonly> @* Make Email read-only *@
                         <span asp-validation-for="Email" class="text-danger"></span> @* Display validation errors *@
                    </div>
                </div>
                <div class="photo-section">
                    @* Display Current Profile Picture *@
                    <div class="profile-img">
                         @if (!string.IsNullOrEmpty(Model?.CurrentProfilePictureUrl))
                         {
                             <img src="@Model.CurrentProfilePictureUrl" alt="Teacher Profile" class="teacher-image">
                         }
                         else
                         {
                              <img src="@Url.Content("~/assets/teacher1.svg")" alt="Teacher Profile" class="teacher-image"> @* Default image *@
                         }
                    </div>
                    @* File Upload Input for New Photo *@
                    @* Connect the button click to the hidden file input using JavaScript *@
                    <input type="file" id="fileInput" asp-for="NewProfilePictureFile" style="display: none;"> @* Hidden file input *@
                    <button type="button" class="upload-btn" onclick="document.getElementById('fileInput').click();"> @* Button to trigger file input click *@
                        <span class="icon">📷</span>
                        Upload Photo
                    </button>
                    <p class="photo-info">Image size should be under 1MB and image ratio needs to be 1:1</p>
                     @* Display validation errors for the file input *@
                     <span asp-validation-for="NewProfilePictureFile" class="text-danger"></span>
                </div>
            </div>

            @* Biography Textarea *@
            <div class="form-group">
                <label asp-for="Biography"></label>
                <textarea asp-for="Biography" placeholder="Tell students a bit about yourself and your teaching approach (max 200 words)"></textarea>
                 <span asp-validation-for="Biography" class="text-danger"></span> @* Display validation errors *@
            </div>

            <div class="divider"></div>

            <h1>Change Password</h1>
            @* Current Password Input *@
            <div class="form-group">
                <label asp-for="CurrentPassword"></label>
                <div class="password-field">
                    <input type="password" asp-for="CurrentPassword" placeholder="Password">
                     @* Toggle password icon - Requires JS *@
                    <div class="eye-icon toggle-password-icon"> @* Add a class to target with JS *@
                        <svg viewBox="0 0 24 24">
                             <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                             <circle cx="12" cy="12" r="3"></circle>
                        </svg>
                    </div>
                </div>
                 <span asp-validation-for="CurrentPassword" class="text-danger"></span> @* Display validation errors *@
            </div>
            @* New Password Input *@
            <div class="form-group">
                <label asp-for="NewPassword"></label>
                <div class="password-field">
                    <input type="password" asp-for="NewPassword" placeholder="Password">
                     @* Toggle password icon - Requires JS *@
                    <div class="eye-icon toggle-password-icon">
                         <svg viewBox="0 0 24 24">
                              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                              <circle cx="12" cy="12" r="3"></circle>
                         </svg>
                     </div>
                </div>
                 <span asp-validation-for="NewPassword" class="text-danger"></span> @* Display validation errors *@
            </div>
            @* Confirm Password Input *@
            <div class="form-group">
                <label asp-for="ConfirmNewPassword"></label>
                <div class="password-field">
                    <input type="password" asp-for="ConfirmNewPassword" placeholder="Confirm new password">
                     @* Toggle password icon - Requires JS *@
                     <div class="eye-icon toggle-password-icon">
                         <svg viewBox="0 0 24 24">
                              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                              <circle cx="12" cy="12" r="3"></circle>
                         </svg>
                     </div>
                </div>
                 <span asp-validation-for="ConfirmNewPassword" class="text-danger"></span> @* Display validation errors *@
            </div>

            @* Save Changes Button - This button submits the form *@
            <button type="submit" class="save-btn">Save Changes</button>
        </form>
        @* **End of the Settings Form** *@

    </div> @* End of container *@


    <footer>
        © 2025 Eduvera. All Rights reserved.
    </footer>

    @* Include necessary JavaScript files *@
     <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> @* If Bootstrap JS is used *@
    @* Include client-side validation scripts *@
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    @* Include the provided JavaScript code and any custom JS for this page *@
    <script>
        // Toggle profile dropdown visibility
        document.querySelector('.profile-btn').addEventListener('click', function(e) {
            e.stopPropagation();
            document.querySelector('.dropdown-content').classList.toggle('show');
        });

        // Close dropdown when clicking outside
        window.addEventListener('click', function() {
             const dropdownContent = document.querySelector('.dropdown-content');
             if(dropdownContent) dropdownContent.classList.remove('show');
        });

        // Prevent dropdown from closing when clicking inside
        document.querySelector('.dropdown-content').addEventListener('click', function(e) {
             e.stopPropagation();
        });


        // Toggle password visibility for all password fields with the toggle icon
        document.querySelectorAll('.toggle-password-icon').forEach(icon => {
             icon.addEventListener('click', function() {
                 // Find the input field right before the icon
                 const input = this.previousElementSibling;
                 if (input && input.type === 'password') {
                     input.type = 'text';
                     // Optional: Change icon visually (e.g., eye to eye-slash)
                     // This requires changing the SVG content or adding/removing classes
                 } else if (input && input.type === 'text') {
                     input.type = 'password';
                     // Optional: Change icon visually
                 }
             });
         });


         // Optional: JavaScript to display the selected file name next to the upload button
         // document.getElementById('fileInput').addEventListener('change', function() {
             const fileNameSpan = document.createElement('span');
             fileNameSpan.textContent = this.files[0].name;
             const uploadButton = document.querySelector('.upload-btn');
             if (uploadButton) {
                 // Remove previous file name span if exists
                 const existingFileNameSpan = uploadButton.nextElementSibling;
                 if (existingFileNameSpan && existingFileNameSpan.tagName === 'SPAN') {
                     existingFileNameSpan.remove();
                 }
                 uploadButton.parentNode.insertBefore(fileNameSpan, uploadButton.nextSibling);
             }
         });

    </script>

    @* If you have a separate JS file for settings, link it here *@
    @* <script src="@Url.Content("~/JavaScript/teacherSettings.js")"></script> *@

</body>
</html>